---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Button from '../../components/Button.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import PostPreview from '../../components/PostPreview.astro';
import Subscribe from '../../components/Subscribe.astro';
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { slugify, estimateReadingTime } from '../../utils/common-utils';
import { Image } from 'astro:assets';

export async function getStaticPaths() {
    const posts = (await getCollection('blog')).sort(sortItemsByDateDesc);
    const postCount = posts.length;
    return posts.map((post, index) => ({
        params: { id: post.id },
        props: {
            post,
            prevPost: index + 1 !== postCount ? posts[index + 1] : null,
            nextPost: index !== 0 ? posts[index - 1] : null
        }
    }));
}

type Props = { post: CollectionEntry<'blog'>; prevPost: CollectionEntry<'blog'>; nextPost: CollectionEntry<'blog'> };

const { href } = Astro.url;
const { post, prevPost, nextPost } = Astro.props;
const { title, publishDate, updatedDate, excerpt, cover, tags = [], seo } = post.data;
const { Content } = await render(post);
const readingTime = estimateReadingTime(post.body || excerpt || '');
---

<BaseLayout
    title={seo?.title ?? title}
    description={seo?.description ?? excerpt}
    image={seo?.image?.src ? { src: seo.image.src, alt: seo.image.alt } : undefined}
    pageType="article"
    showHeader={false}
>
    {
        seo?.image?.src && (
            <section class="relative w-[100vw] left-1/2 right-1/2 -ml-[50vw] -mr-[50vw] h-64 sm:h-96 mb-8 flex items-end justify-center sm:w-full sm:left-0 sm:right-0 sm:ml-0 sm:mr-0">
                <Image
                    src={seo.image.src}
                    alt={seo.image.alt || title}
                    class="absolute inset-0 w-full h-full object-cover shadow-lg sm:rounded-xl"
                    style="z-index: 0;"
                />
            </section>
        )
    }
    <div class="w-full max-w-2xl mx-auto -mt-25 z-10 relative">
        <div class="bg-[rgba(255,255,255,0.7)] backdrop-blur-md rounded-2xl shadow-xl px-6 py-6 mx-4 flex flex-col items-start">
            <h1 class="text-3xl sm:text-4xl font-extrabold mb-2 leading-tight text-black text-left">{title}</h1>
            <div class="flex flex-wrap gap-2 text-sm text-gray-700 font-medium mb-2">
                <span>{readingTime} min read</span>
                <span class="mx-1">|</span>
                <FormattedDate date={publishDate} />
                {
                    tags.length > 0 && (
                        <>
                            <span class="mx-1">|</span>
                            {tags.map((tag: string, i: number) => (
                                <span class="">
                                    #{tag}
                                    {i < tags.length - 1 && ','}
                                </span>
                            ))}
                        </>
                    )
                }
            </div>
        </div>
    </div>
    <article class="mb-16 sm:mb-24" style="margin-top:24px;">
        <div
            class="max-w-none prose prose-neutral prose-img:rounded-xl prose-img:mx-auto prose-img:my-8 prose-headings:font-bold prose-headings:text-main prose-h1:text-4xl prose-h1:font-extrabold prose-h2:text-3xl prose-h2:font-semibold prose-h3:text-2xl prose-h3:font-semibold prose-p:text-lg prose-p:leading-relaxed prose-p:mb-6"
        >
            <Content />
        </div>
        <div class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base">
            {
                tags.length > 0 && (
                    <div class="flex flex-wrap gap-x-5 gap-y-1 text-sm">
                        {tags.map((tag: string) => (
                            <a class="text-main hover:underline" href={`/tags/${slugify(tag)}`}>
                                #{tag}
                            </a>
                        ))}
                    </div>
                )
            }
            <Button class="copy-url-button" aria-label="Copy link" data-url={href} data-tooltip-default="Copy link" data-tooltip-success="Copied">Share</Button>
        </div>
    </article>
    {
        (prevPost || nextPost) && (
            <div class="my-16 sm:my-24">
                <h2 class="mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl">Read Next</h2>
                {nextPost && <PostPreview post={nextPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
                {prevPost && <PostPreview post={prevPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
            </div>
        )
    }
    <Subscribe class="my-16 sm:my-24" />
</BaseLayout>

<script>
    document.addEventListener('astro:page-load', () => {
        const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement;
        copyUrlButton?.addEventListener('click', async () => {
            await copyUrl(copyUrlButton);
        });

        async function copyUrl(button: HTMLButtonElement) {
            let url = button.getAttribute('data-url') || '';
            let label = button.innerText;

            await navigator.clipboard.writeText(url);

            button.innerText = 'Copied';

            setTimeout(() => {
                button.innerText = label;
            }, 2500);
        }
    });
</script>
